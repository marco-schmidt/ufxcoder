buildscript {
  repositories {
    mavenCentral()
  }
}

plugins {
  id 'com.diffplug.spotless' version '6.1.2'
  id "com.github.ben-manes.versions" version '0.41.0'
  id 'com.github.jk1.dependency-license-report' version '2.0'
  id 'com.github.spotbugs' version '5.0.3'
  id "com.jfrog.bintray" version "1.8.5"
  id 'jacoco'
  id 'org.owasp.dependencycheck' version '6.5.2.1'
}

repositories {
  mavenCentral()
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'maven-publish'
apply plugin: 'com.diffplug.spotless'
apply plugin: 'com.github.jk1.dependency-license-report'
apply plugin: 'com.github.spotbugs'

description 'Universal File Transcoder'
mainClassName = 'ufxcoder.app.UniversalFileTranscoder'
def licenseName = 'The Apache Software License, Version 2.0'

defaultTasks 'clean', 'check', 'jacocoTestReport', 'javadoc', 'installDist', 'generateLicenseReport', 'run'

dependencies {
  implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.36'
  implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.10'
  testImplementation group: 'junit', name: 'junit', version: '4.13.2'
}

tasks.withType(JavaCompile) {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = sourceCompatibility
  options.debugOptions.debugLevel = 'lines,vars,source'
  options.encoding = java.nio.charset.StandardCharsets.UTF_8
  options.warnings = true
  options.deprecation = true
  options.compilerArgs += ['-Xlint:all', '-Werror']
}

def retrieveGitModification = { ->
  def baos = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'diff', '--shortstat'
    standardOutput = baos
  }
  return baos.toString().trim()
}

def retrieveGitRevision = { ->
  def baos = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'rev-parse', 'HEAD'
    standardOutput = baos
  }
  return baos.toString().trim()
}

jar {
  manifest {
    attributes(
      'Implementation-Title': project.name,
      'Implementation-Version': project.version,
      'Created-By': 'Gradle ' + getProject().getGradle().getGradleVersion(),
      'Build-Date': new Date(),
      'License': licenseName,
      'Main-Class': mainClassName,
      'Java-Version': targetCompatibility,
      'Git-Revision': retrieveGitRevision(),
      'Git-Modified': retrieveGitModification(),
      'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '))
  }
  from ('.') {
    include 'LICENSE'
    into 'META-INF'
  }
}

run {
  args += '--print-env'
}

// version is stable if it contains only numerical parts or a 'stable keyword'
def isStable = { String version ->
  def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase(Locale.ENGLISH).contains(it) }
  def regex = /^[0-9,.v-]+(-r)?$/
  return stableKeyword || (version ==~ regex)
}

dependencyUpdates {
  rejectVersionIf {
    !isStable(it.candidate.version)
  }
  outputDir = "${buildDir}/reports/dependencyUpdates"
}

// https://pmd.github.io/
pmd {
  toolVersion = '5.8.0'
  ruleSets = []
  consoleOutput = true
  ruleSetConfig = resources.text.fromFile('config/pmd/pmd.xml')
  ignoreFailures = false
  incrementalAnalysis = false
}

// https://github.com/diffplug/spotless
spotless {
  java {
    licenseHeaderFile 'config/spotless/license-header.txt'
    //removeUnusedImports()
    trimTrailingWhitespace()
    eclipse().configFile 'config/eclipse/formatter.xml'
  }
}

// https://github.com/checkstyle/checkstyle
// http://checkstyle.sourceforge.net
checkstyle {
  toolVersion '9.0'
  ignoreFailures false
  showViolations true
  configDirectory = file("${rootDir}/config/checkstyle")
}

// https://github.com/spotbugs/spotbugs
spotbugs {
  toolVersion = '4.5.2'
  effort = 'max' // min, default, max
  reportLevel = 'low' // low, medium, high  
  ignoreFailures = false
  excludeFilter = file('config/spotbugs/excludeBugsFilter.xml')
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
  reports {
    xml.enabled = false
    html.enabled = true
    html.stylesheet resources.text.fromFile('config/spotbugs/report-stylesheet.xsl')
  }
}

task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task packageSources(type: Jar, dependsOn: 'classes') {
    from sourceSets.main.allSource
    classifier = 'sources'
}

publishing {
  publications {
    library(MavenPublication) {
      from components.java
      artifact packageSources
      artifact packageJavadoc
      groupId 'com.github.marco-schmidt'
      pom.withXml {
        asNode().appendNode('url', 'https://github.com/marco-schmidt/ufxcoder')
        asNode().appendNode('description', "${description}")
        asNode().appendNode('scm').
          appendNode('connection', 'scm:git:git@github.com:marco-schmidt/ufxcoder.git').parent().
          appendNode('developerConnection', 'scm:git:git@github.com:marco-schmidt/ufxcoder.git').parent().
          appendNode('url', 'https://github.com/marco-schmidt/ufxcoder')
        asNode().appendNode('developers').appendNode('developer').
          appendNode('id', 'marco-schmidt').parent().
          appendNode('name', 'Marco Schmidt').parent().
          appendNode('email', 'mschmidtgit@protonmail.com')
        asNode().appendNode('licenses').appendNode('license').
          appendNode('name', licenseName).parent().
          appendNode('url', 'https://www.apache.org/licenses/LICENSE-2.0.html')
      }
    }
  }
}

// https://github.com/bintray/bintray-examples/tree/master/gradle-bintray-plugin-examples/publications-example
// usage: ./gradlew -PbintrayUser=marco-schmidt -PbintrayApiKey=... bintrayUpload
bintray {
  user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
  key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
  publications = ['library']
  pkg {
    repo = 'ufxcoder'
    name = 'library'
    licenses = ['Apache-2.0']
    vcsUrl = 'https://github.com/marco-schmidt/ufxcoder.git'
    publicDownloadNumbers = false
    version {
      name = project.version
      released  = new Date()
    }
  }
}


jacoco {
  toolVersion = "0.8.7"
}

jacocoTestReport {
  reports {
    html.destination file("${buildDir}/reports/jacoco")
  }
}
jacocoTestCoverageVerification.dependsOn test
jacocoTestReport.dependsOn jacocoTestCoverageVerification

dependencyCheck {
  scanConfigurations = ['runtimeClasspath']
  cveValidForHours=24
  failBuildOnCVSS=0
  analyzers {
    assemblyEnabled=false
  }
  outputDirectory = "${buildDir}/reports/security-report"
}
check.dependsOn dependencyCheckAnalyze
