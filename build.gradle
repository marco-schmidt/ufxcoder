buildscript {
  repositories {
    jcenter()
  }
}

plugins {
  id 'com.diffplug.gradle.spotless' version '3.7.0'
  id 'com.github.jk1.dependency-license-report' version '0.4.1'
  id 'com.github.spotbugs' version '1.6.0'
}

repositories {
  jcenter()
  mavenCentral()
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'com.github.jk1.dependency-license-report'
apply plugin: 'com.github.spotbugs'

description 'Universal File Transcoder'
version = '0.0.1'
mainClassName = 'ufxcoder.app.UniversalFileTranscoder'

defaultTasks 'clean', 'build'

dependencies {
  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
  compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
  testCompile group: 'junit', name: 'junit', version: '4.12'
}

task wrapper(type: Wrapper) {
  gradleVersion = '4.4'
}

tasks.withType(JavaCompile) {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = sourceCompatibility
  options.debugOptions.debugLevel = 'lines,vars,source'
  options.encoding = java.nio.charset.StandardCharsets.UTF_8
  options.warnings = true
  options.deprecation = true
  options.compilerArgs += ['-Xlint:all', '-Werror']
}

def retrieveGitModification = { ->
  def baos = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'diff', '--shortstat'
    standardOutput = baos    
  }
  return baos.toString().trim()
}

def retrieveGitRevision = { ->
  def baos = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'rev-parse', 'HEAD'
    standardOutput = baos
  }
  return baos.toString().trim()
}

jar {
  manifest {
    attributes(
      'Implementation-Title': project.name,
      'Implementation-Version': project.version,
      'Created-By': 'Gradle ' + getProject().getGradle().getGradleVersion(),
      'Build-Date': new Date(),
      'License': 'The Apache License 2.0',
      'Main-Class': mainClassName,
      'Java-Version': targetCompatibility,
      'Git-Revision': retrieveGitRevision(),
      'Git-Modified': retrieveGitModification(),
      'Class-Path': configurations.compile.collect { it.getName() }.join(' '))
  }
  from ('.') {
    include 'LICENSE'
    into 'META-INF'
  }
}

// https://pmd.github.io/
pmd {
  toolVersion = '5.8.1'
  ruleSets = []
  consoleOutput = true
  ruleSetConfig = resources.text.fromFile('config/pmd/pmd.xml')
  ignoreFailures = false
}

// https://github.com/diffplug/spotless
spotless {
  java {
    licenseHeaderFile 'config/spotless/license-header.txt'
    removeUnusedImports()
    trimTrailingWhitespace()
    eclipse().configFile 'config/eclipse/formatter.xml'
  }
}

// https://github.com/checkstyle/checkstyle
// http://checkstyle.sourceforge.net
checkstyle {
  toolVersion '8.5'
  ignoreFailures false
  showViolations true
}

// https://github.com/spotbugs/spotbugs
spotbugs {
  toolVersion = '3.1.1'
  effort = 'max' // min, default, max
  reportLevel = 'low' // low, medium, high  
  ignoreFailures = false
  excludeFilter = file('config/spotbugs/excludeBugsFilter.xml')
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
  reports {
    xml.enabled = false
    html.enabled = true
    html.stylesheet resources.text.fromFile('config/spotbugs/report-stylesheet.xsl')
  }
}
